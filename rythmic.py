# -*- coding: utf-8 -*-
"""Rythmic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-o_c73TmcVstfZSv4WwvOTk1fkK1M3P-

About the dataset

* The dataset "data.csv" is a synthetical dataset.


* It includes columns for microbial diversity (microbial_diversity), microbial abundance (microbial_abundance), menstrual cycle characteristics such as cycle length (cycle_length) and hormonal patterns (hormonal_patterns), as well as traditional cardiovascular risk factors like blood pressure (blood_pressure), cholesterol levels (cholesterol_levels), and BMI (bmi).

* There is a column for the target variable indicating the presence or absence of heart disease (heart_disease)
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

# Set random seed for reproducibility
np.random.seed(42)

# Generate random values for each feature
num_samples = 1000

# Microbial diversity (range: 0 to 1)
microbial_diversity = np.random.rand(num_samples)

# Microbial abundance (range: 0 to 1)
microbial_abundance = np.random.rand(num_samples)

# Menstrual cycle length (range: 21 to 35 days)
cycle_length = np.random.randint(21, 36, size=num_samples)

# Hormonal patterns (range: 0 to 1)
hormonal_patterns = np.random.rand(num_samples)

# Blood pressure (range: 90 to 140 mmHg for systolic, 60 to 90 mmHg for diastolic)
blood_pressure_systolic = np.random.randint(90, 141, size=num_samples)
blood_pressure_diastolic = np.random.randint(60, 91, size=num_samples)

# Cholesterol levels (range: 120 to 200 mg/dL for total cholesterol)
cholesterol_levels = np.random.randint(120, 201, size=num_samples)

# BMI (range: 18.5 to 30)
bmi = np.random.uniform(18.5, 30, size=num_samples)

# Generate target variable indicating presence (1) or absence (0) of heart disease
heart_disease = np.random.randint(2, size=num_samples)

# Create DataFrame
data = pd.DataFrame({
    'microbial_diversity': microbial_diversity,
    'microbial_abundance': microbial_abundance,
    'cycle_length': cycle_length,
    'hormonal_patterns': hormonal_patterns,
    'blood_pressure_systolic': blood_pressure_systolic,
    'blood_pressure_diastolic': blood_pressure_diastolic,
    'cholesterol_levels': cholesterol_levels,
    'bmi': bmi,
    'heart_disease': heart_disease
})

# Save DataFrame to CSV
data.to_csv('/content/heart_disease_dataset.csv', index=False)

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the generated dataset
data = pd.read_csv('heart_disease_dataset.csv')
data.head()

# Extract relevant features from the data
microbiome_features = pd.DataFrame(data, columns=['microbial_diversity', 'microbial_abundance'])
menstrual_cycle_features = data[['cycle_length', 'hormonal_patterns']]
cvd_features = pd.DataFrame(data, columns=['blood_pressure_systolic', 'blood_pressure_diastolic', 'cholesterol_levels', 'bmi'])

# Standardize microbiome-related features
microbiome_scaler = StandardScaler()
microbiome_features_scaled = microbiome_scaler.fit_transform(microbiome_features)
microbiome_features_scaled_df = pd.DataFrame(microbiome_features_scaled, columns=['microbial_diversity', 'microbial_abundance'])

# Standardize cardiovascular-related features
cvd_scaler = StandardScaler()
cvd_features_scaled = cvd_scaler.fit_transform(cvd_features)
cvd_features_scaled_df = pd.DataFrame(cvd_features_scaled, columns=['blood_pressure_systolic', 'blood_pressure_diastolic', 'cholesterol_levels', 'bmi'])

# Combine the standardized features into a single feature matrix
X = pd.concat([microbiome_features_scaled_df, menstrual_cycle_features, cvd_features_scaled_df], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, data['heart_disease'], test_size=0.2, random_state=42)

# Train the logistic regression model
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

# Make predictions using logistic regression
y_pred_lr = lr_model.predict(X_test)

# Evaluate logistic regression model
accuracy_lr = accuracy_score(y_test, y_pred_lr)
report_lr = classification_report(y_test, y_pred_lr)

print("Logistic Regression Accuracy:", accuracy_lr)
print("Logistic Regression Classification Report:")
print(report_lr)

# Train the random forest classifier model
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)

# Make predictions using random forest classifier
y_pred_rf = rf_model.predict(X_test)

# Evaluate random forest classifier model
accuracy_rf = accuracy_score(y_test, y_pred_rf)
report_rf = classification_report(y_test, y_pred_rf)

print("Random Forest Classifier Accuracy:", accuracy_rf)
print("Random Forest Classifier Classification Report:")
print(report_rf)

from sklearn.svm import SVC

# Train the SVM model
svm_model = SVC()
svm_model.fit(X_train, y_train)

# Make predictions using SVM
y_pred_svm = svm_model.predict(X_test)

# Evaluate SVM model
accuracy_svm = accuracy_score(y_test, y_pred_svm)
report_svm = classification_report(y_test, y_pred_svm)

print("SVM Accuracy:", accuracy_svm)
print("SVM Classification Report:")
print(report_svm)

from xgboost import XGBClassifier

# Train the XGBoost model
xgb_model = XGBClassifier()
xgb_model.fit(X_train, y_train)

# Make predictions using XGBoost
y_pred_xgb = xgb_model.predict(X_test)

# Evaluate XGBoost model
accuracy_xgb = accuracy_score(y_test, y_pred_xgb)
report_xgb = classification_report(y_test, y_pred_xgb)

print("XGBoost Accuracy:", accuracy_xgb)
print("XGBoost Classification Report:")
print(report_xgb)

from sklearn.neighbors import KNeighborsClassifier

# Train the KNN model
knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)

# Make predictions using KNN
y_pred_knn = knn_model.predict(X_test)

# Evaluate KNN model
accuracy_knn = accuracy_score(y_test, y_pred_knn)
report_knn = classification_report(y_test, y_pred_knn)

print("KNN Accuracy:", accuracy_knn)
print("KNN Classification Report:")
print(report_knn)

from sklearn.tree import DecisionTreeClassifier

# Train the Decision Tree model
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, y_train)

# Make predictions using Decision Tree
y_pred_dt = dt_model.predict(X_test)

# Evaluate Decision Tree model
accuracy_dt = accuracy_score(y_test, y_pred_dt)
report_dt = classification_report(y_test, y_pred_dt)

print("Decision Tree Accuracy:", accuracy_dt)
print("Decision Tree Classification Report:")
print(report_dt)

import pandas as pd

# Create a dictionary to store model names and their accuracies
model_accuracies = {
    'Logistic Regression': accuracy_lr,
    'Random Forest Classifier': accuracy_rf,
    'Support Vector Machine': accuracy_svm,
    'XGBoost': accuracy_xgb,
    'K-Nearest Neighbors': accuracy_knn,
    'Decision Tree': accuracy_dt
}

# Convert the dictionary to a pandas DataFrame
accuracy_table = pd.DataFrame(list(model_accuracies.items()), columns=['Model', 'Accuracy'])

# Sort the DataFrame by accuracy in descending order
accuracy_table.sort_values(by='Accuracy', ascending=False, inplace=True)

# Reset the index
accuracy_table.reset_index(drop=True, inplace=True)

print(accuracy_table)

def predict_heart_disease_risk(model, microbiome_scaler, cvd_scaler):
    print("Please provide the following information:")

    # Get input from the user
    microbial_diversity = float(input("Microbial diversity (e.g., 0.5): "))
    microbial_abundance = float(input("Microbial abundance (e.g., 0.3): "))
    cycle_length = float(input("Menstrual cycle length (e.g., 28): "))
    hormonal_patterns = float(input("Hormonal patterns (e.g., 1 for regular, 0 for irregular): "))
    blood_pressure_systolic = float(input("Systolic blood pressure (e.g., 120): "))
    blood_pressure_diastolic = float(input("Diastolic blood pressure (e.g., 80): "))
    cholesterol_levels = float(input("Cholesterol levels (e.g., 200): "))
    bmi = float(input("Body Mass Index (BMI) (e.g., 25): "))

    # Create a DataFrame with the provided input data and appropriate column names
    input_data = pd.DataFrame({
        'microbial_diversity': [microbial_diversity],
        'microbial_abundance': [microbial_abundance],
        'cycle_length': [cycle_length],
        'hormonal_patterns': [hormonal_patterns],
        'blood_pressure_systolic': [blood_pressure_systolic],
        'blood_pressure_diastolic': [blood_pressure_diastolic],
        'cholesterol_levels': [cholesterol_levels],
        'bmi': [bmi]
    })

    # Standardize the input data using the provided scalers
    microbiome_features_scaled = microbiome_scaler.transform(input_data[['microbial_diversity', 'microbial_abundance']])
    cvd_features_scaled = cvd_scaler.transform(input_data[['blood_pressure_systolic', 'blood_pressure_diastolic', 'cholesterol_levels', 'bmi']])

    # Combine the standardized features into a single input array
    input_features = pd.concat([pd.DataFrame(microbiome_features_scaled, columns=['microbial_diversity', 'microbial_abundance']),
                                input_data[['cycle_length', 'hormonal_patterns']],
                                pd.DataFrame(cvd_features_scaled, columns=['blood_pressure_systolic', 'blood_pressure_diastolic', 'cholesterol_levels', 'bmi'])],
                               axis=1)

    # Predict heart disease risk
    prediction = model.predict(input_features)[0]

    if prediction == 1:
        print("Based on the provided information, the predicted risk of heart disease is HIGH.")
    else:
        print("Based on the provided information, the predicted risk of heart disease is LOW.")

print("\nPredicting heart disease risk using Decision Tree model:")
predict_heart_disease_risk(dt_model, microbiome_scaler, cvd_scaler)

print("\nPredicting heart disease risk using XGBoost model:")
predict_heart_disease_risk(xgb_model, microbiome_scaler, cvd_scaler)

print("\nPredicting heart disease risk using Random Forest Classifier model:")
predict_heart_disease_risk(rf_model, microbiome_scaler, cvd_scaler)

print("\nPredicting heart disease risk using Support Vector Machine (SVM) model:")
predict_heart_disease_risk(svm_model, microbiome_scaler, cvd_scaler)

print("Predicting heart disease risk using Logistic Regression model:")
predict_heart_disease_risk(lr_model, microbiome_scaler, cvd_scaler)

print("\nPredicting heart disease risk using K-Nearest Neighbors (KNN) model:")
predict_heart_disease_risk(knn_model, microbiome_scaler, cvd_scaler)